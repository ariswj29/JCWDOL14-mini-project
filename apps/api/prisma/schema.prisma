// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Sample {
  id        Int      @id @default(autoincrement())
  name      String
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("samples") // if you want to use snake_case format
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users     User[]
  @@map("roles")
}

model User {
  id        Int      @id @default(autoincrement())
  firstName String   @db.VarChar(50)
  lastName  String   @db.VarChar(50)
  role     Role   @relation(fields: [roleId], references: [id])
  roleId    Int
  email     String   @unique
  password  String
  address String? 
  phoneNumber String? @db.VarChar(15)
  usingReferralCode String @db.VarChar(8) @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  profile   Profile[]
  event Event[]
  attandee Attandee[]
  review Review []
  promotion Promotion []
  @@map("users")
}

model Profile {
  id        Int      @id @default(autoincrement())
  referralCode String @db.VarChar(8)
  points    Int
  discount  Int
  saldo Int?
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  point Point[]
  @@map("profiles")
}

model Event {
  id Int @id @default(autoincrement())
  name String @db.VarChar(50)
  image String?
  date DateTime
  time String
  location String @db.VarChar(100)
  price Int
  description String @db.Text
  user User @relation(fields: [userId], references: [id])
  userId Int 
  availableSeats Int
  isFree Boolean
  category Category @relation(fields: [categoryId], references: [id])
  categoryId Int
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt

  attandee Attandee []
  transaction Transaction []
  promotion Promotion []
  review Review []
   @@map("events")
}

model Attandee{
  id Int @id @default(autoincrement())
  qn String @db.VarChar(4)
  event Event @relation(fields: [eventId], references: [id])
  eventId Int 
  user User @relation(fields: [userId], references: [id])
  userId Int
  transaction Transaction @relation(fields: [transactionId], references: [id])
  transactionId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 @@map("attandees")
}

model Transaction{
  id Int @id @default(autoincrement())
  date DateTime
  price Int
  event Event @relation(fields: [eventId], references: [id])
  eventId Int
  userId Int
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt

  attandee Attandee []
  review Review []
   @@map("transactions") 
}

model Category{
  id Int @id @default(autoincrement())
  name String @db.VarChar(50)
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt


  event Event[]
  @@map("categories")
}

model Promotion {
  id          Int      @id @default(autoincrement())
  code        String
  discount    Float
  event       Event    @relation(fields: [eventId], references: [id])
  eventId     Int
  user User @relation(fields: [userId], references: [id])
  userId Int
  expireAt DateTime
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@map("promotions")
}

model Review {
  id Int @id @default(autoincrement())
  rating String
  comment String
  event Event @relation(fields: [eventId], references: [id])
  eventId Int
  transaction Transaction @relation(fields: [transactionId], references: [id])
  transactionId Int
  user User @relation(fields: [userId], references: [id])
  userId Int
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@map("reviews")
}

model Point{
  id Int @id @default(autoincrement())
  profile Profile @relation(fields: [profileId], references: [id])
  profileId Int
  point Int
  expireAt DateTime
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@map("points")
}